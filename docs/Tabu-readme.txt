Tabu Search Optimization for Prisoner’s Dilemma

Overview

This project implements a Tabu Search algorithm to optimize strategies for the Iterated Prisoner’s Dilemma (IPD). The algorithm iteratively improves a given strategy by modifying its decision-making pattern while avoiding previously visited solutions using a Tabu List. The goal is to find a strategy that maximizes its total payoff when competing against a predefined opponent strategy.

How It Works

Strategy Encoding:
Strategies are represented as binary strings:
'0' = Cooperate (C)
'1' = Defect (D)
Example: '010101' means the strategy alternates between cooperating and defecting.

Evaluation Function :
Strategies are evaluated by playing against an opponent (e.g., Always Cooperate '000000').
The Prisoner’s Dilemma payoff matrix determines the score for each round.

Neighborhood Generation :
Neighboring strategies are generated by flipping one bit in the strategy string.

Tabu Search Process:
Selects the best neighbor that is not in the Tabu List.
Updates the Tabu List to prevent revisiting previous strategies.
Iterates for a fixed number of rounds to find the best strategy.

Output:
The script prints:
Initial Strategy
Optimized Strategy (found using Tabu Search)
Optimized Score (total payoff over multiple rounds)

Dependencies:
Ensure you have Python installed along with the following libraries:
pip install numpy
